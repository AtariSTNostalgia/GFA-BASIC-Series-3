'
' *** INITIALIZATION AND PREPARATIONS ***
@generalpreps
@programpreps
@bufferscreen
@predraw
@precalcs
'
' ***          MAIN PROGRAM           ***
@defaultscreen
@rolldowntransition(graphbuffer%)
'
' ***     END ACTIONS AND CLEANUP     ***
' @buffercheck
@animate_word
@endsequence
@uncovertransition(graphbuffer%)
@generalcleanup
'
' ***       PROGRAM PROCEDURES        ***
'
> PROCEDURE programpreps
  ' *** Preparations specific for this program ***
  spritebuffer%=graphbuffer%+32000
  '
  ' *** Prepare Array to hold WORD-aligned BYTE addresses for XY coordinates ***
  DIM dest_xy%(23)       ! Array to read bytes for small sprite coordinates
  DIM src_y%(23)         ! Array to read byte for source y-coordinate
  DIM cln_xy%(23)        ! Array to read cleanup source byte from
  '
  DIM dest_xy_precalc%(359)   ! Array with pre-calculated destination X/Y
  DIM src_y_precalc%(359)
  DIM cln_xy_precalc%(359)
  DIM biglogo_s_precalc%(359) ! Arrays with precalculated data for
  DIM biglogo_d_precalc%(359) ! Soucre, destination, and cleanup
  '
  ' *** Anything to do before switching screens ***
  CLS
  PRINT AT(33,5);"Please wait..."
RETURN
> PROCEDURE precalcs
  FOR angle&=0 TO 359
    xbyte%=MUL(DIV(312+200*COSQ(4*angle&),16),2)
    ybyte%=MUL(192-110*SINQ(3*angle&),80)
    src_y_shift%=MUL(MOD(312+200*COSQ(4*angle&),16),2560)
    '
    dest_xy_precalc%(angle&)=xbyte%+ybyte%
    '
    src_y_precalc%(angle&)=spritebuffer%+src_y_shift%
    '
    cln_xy_precalc%(angle&)=graphbuffer%+xbyte%+ybyte%
    '
    biglogo_s_precalc%(angle&)=spritebuffer%+MUL(MOD(272-192*COSQ(2*angle&),16),2560)+50
    biglogo_d_precalc%(angle&)=28480+MUL(DIV(272-192*COSQ(2*angle&),16),2)
  NEXT angle&
RETURN
> PROCEDURE predraw
  '
  ' ** Make sure whole graphbuffer is cleared (GFA does not cleanup properly) **
  CLS
  FOR cleansheet%=0 TO 70000 STEP 10000
    BMOVE bufferscreen%,graphbuffer%+cleansheet%,10000
  NEXT cleansheet%
  '
  ' ** Draw canvas **
  CLS
  DEFFILL 1,2,1
  PBOX 0,0,639,399
  DEFFILL 1,2,4
  PRBOX 40,60,600,340
  DEFFILL 0
  PRBOX 120,130,520,270
  DEFTEXT 1,0,0,26
  GRAPHMODE 2
  TEXT 130,40," ATARI ST NOSTALGIA "
  BMOVE bufferscreen%,graphbuffer%,32000
  '
  ' ** Draw big logo **
  CLS
  DEFFILL 1,1,0
  PRBOX 400,0,495,31
  DEFTEXT 0,0,0,26
  TEXT 408,28,"ASN"
  '
  ' *** Draw sprites ***
  FOR i|=0 TO 16 STEP 2
    PRBOX (i|*16),0,(i|*16)+15,15
  NEXT i|
  DEFTEXT 0,0,0,6
  GRAPHMODE 2
  TEXT 1,10,""
  PLOT 15,10
  DEFTEXT 0,1,0,6
  TEXT 35,11,"S"
  TEXT 67,11,"T"
  TEXT 99,11,"N"
  TEXT 131,11,"O"
  TEXT 164,11,"L"
  TEXT 195,11,"G"
  TEXT 227,11,"I"
  TEXT 259,11,"A"
  ' ** Draw mask **
  PRBOX 288,0,303,15
  GRAPHMODE 1
  PBOX 0,160,31,175
  '
  ' **Copy 16 shifts of spites to spritebuffer% **
  FOR shift&=0 TO 15
    RC_COPY bufferscreen%,0,0,495,32 TO spritebuffer%,shift&,MUL(shift&,32),3
    RC_COPY bufferscreen%,0,160,32,16 TO spritebuffer%,288,MUL(shift&,32),6
  NEXT shift&
RETURN
> PROCEDURE buffercheck
  FOR shift%=0 TO 30
    BMOVE graphbuffer%+(shift%*2560),XBIOS(2),32000
    ~INP(2)
  NEXT shift%
RETURN
> PROCEDURE endsequence
  @defaultscreen
  logicalscreen%=physicalscreen%
  BMOVE graphbuffer%,logicalscreen%,32000
  DEFFILL 1
  FOR box&=0 TO 200
    PBOX 0,200-box&,639,200-(box&+1)
    PBOX 0,200+box&,639,200+(box&+1)
  NEXT box&
  '  DEFFILL 0
  ' FOR box&=0 TO 200
  ' PBOX 0,200-box&,639,200-(box&+1)
  ' PBOX 0,200+box&,639,200+(box&+1)
  ' NEXT box&
RETURN
PROCEDURE animate_word
  BMOVE graphbuffer%,bufferscreen%,32000
  BMOVE graphbuffer%,logicalscreen%,32000
  ARRAYFILL dest_xy%(),graphbuffer%+43520
  ARRAYFILL cln_xy%(),graphbuffer%+64+15360
  ARRAYFILL src_y%(),0
  DO UNTIL ASC(INKEY$)=32
    time%=TIMER
    FOR angle&=0 TO 359 STEP 1
      VSYNC
      '
      ' ** BMOVE of 32 scanlines is faster than LONG{} cleanup for big sprite **
      BMOVE graphbuffer%+28480,bufferscreen%+28480,2560
      '
      ' ** Cleanup old  sprites. Fixed pattern means only 1 to cleanup **
      ' **           16 LONG{} is faster than 16 lines BMOVE           **
      FOR spriteline%=0 TO 1200 STEP 80
        {ADD(dest_xy%(23),spriteline%)}={ADD(cln_xy%(23),spriteline%)}
      NEXT spriteline%
      '
      ' *** Write byte values for new coordinates ***
      INSERT dest_xy%(0)=bufferscreen%+dest_xy_precalc%(angle&)
      INSERT cln_xy%(0)=cln_xy_precalc%(angle&)
      INSERT src_y%(0)=src_y_precalc%(angle&)
      '
      ' *** Draw masks and prites in one loop = less calculations ***
      FOR spriteline%=0 TO 1200 STEP 80
        ' A
        sprite%=ADD(dest_xy%(22),spriteline%)
        {sprite%}=AND({36+src_y%(22)+spriteline%},{sprite%})
        {sprite%}=OR({32+src_y%(22)+spriteline%},{sprite%})
        ' I
        sprite%=ADD(dest_xy%(20),spriteline%)
        {sprite%}=AND({36+src_y%(20)+spriteline%},{sprite%})
        {sprite%}=OR({28+src_y%(20)+spriteline%},{sprite%})
        ' G
        sprite%=ADD(dest_xy%(18),spriteline%)
        {sprite%}=AND({36+src_y%(18)+spriteline%},{sprite%})
        {sprite%}=OR({24+src_y%(18)+spriteline%},{sprite%})
        ' L
        sprite%=ADD(dest_xy%(16),spriteline%)
        {sprite%}=AND({36+src_y%(16)+spriteline%},{sprite%})
        {sprite%}=OR({20+src_y%(16)+spriteline%},{sprite%})
        ' A
        sprite%=ADD(dest_xy%(14),spriteline%)
        {sprite%}=AND({36+src_y%(14)+spriteline%},{sprite%})
        {sprite%}=OR({32+src_y%(14)+spriteline%},{sprite%})
        ' T
        sprite%=ADD(dest_xy%(12),spriteline%)
        {sprite%}=AND({36+src_y%(12)+spriteline%},{sprite%})
        {sprite%}=OR({8+src_y%(12)+spriteline%},{sprite%})
        ' S
        sprite%=ADD(dest_xy%(10),spriteline%)
        {sprite%}=AND({36+src_y%(10)+spriteline%},{sprite%})
        {sprite%}=OR({4+src_y%(10)+spriteline%},{sprite%})
        ' O
        sprite%=ADD(dest_xy%(8),spriteline%)
        {sprite%}=AND({36+src_y%(8)+spriteline%},{sprite%})
        {sprite%}=OR({16+src_y%(8)+spriteline%},{sprite%})
        ' N
        sprite%=ADD(dest_xy%(6),spriteline%)
        {sprite%}=AND({36+src_y%(6)+spriteline%},{sprite%})
        {sprite%}=OR({12+src_y%(6)+spriteline%},{sprite%})
        ' T
        sprite%=ADD(dest_xy%(4),spriteline%)
        {sprite%}=AND({36+src_y%(4)+spriteline%},{sprite%})
        {sprite%}=OR({8+src_y%(4)+spriteline%},{sprite%})
        ' S
        sprite%=ADD(dest_xy%(2),spriteline%)
        {sprite%}=AND({36+src_y%(2)+spriteline%},{sprite%})
        {sprite%}=OR({4+src_y%(2)+spriteline%},{sprite%})
        ' LOGO
        sprite%=ADD(dest_xy%(0),spriteline%)
        {sprite%}=AND({36+src_y%(0)+spriteline%},{sprite%})
        {sprite%}=OR({0+src_y%(0)+spriteline%},{sprite%})
      NEXT spriteline%
      '
      ' ** Big logo sprite copied by  3*32 LONG{} and 32 CARD{} listing **
      dstscreen%=bufferscreen%+biglogo_d_precalc%(angle&)
      FOR cardshift%=0 TO 2480 STEP 80
        src%=biglogo_s_precalc%(angle&)+cardshift%
        dst%=dstscreen%+cardshift%
        {dst%}=XOR({src%},{dst%})
        {dst%+4}=XOR({src%+4},{dst%+4})
        {dst%+8}=XOR({src%+8},{dst%+8})
        CARD{dst%+12}=XOR(CARD{src%+12},CARD{dst%+12})
      NEXT cardshift%
      @swap
    NEXT angle&
    secs=SUB(TIMER,time%)/200
  LOOP
  BMOVE graphbuffer%+28480,bufferscreen%+28480,2560
  BMOVE graphbuffer%+28480,logicalscreen%+28480,2560
  ' ============================================================
  FOR endstep&=0 TO 22
    VSYNC
    ' ** Cleanup **
    FOR spriteline%=0 TO 1200 STEP 80
      {ADD(dest_xy%(23),spriteline%)}={ADD(cln_xy%(23),spriteline%)}
    NEXT spriteline%
    '
    ' ** Write coordinates **
    INSERT dest_xy%(0)=graphbuffer%+43520
    INSERT cln_xy%(0)=graphbuffer%+64+15360
    INSERT src_y%(0)=0
    '
    ' *** Draw masks and prites in one loop = less calculations ***
    FOR spriteline%=0 TO 1200 STEP 80
      ' A
      sprite%=ADD(dest_xy%(22),spriteline%)
      {sprite%}=AND({36+src_y%(22)+spriteline%},{sprite%})
      {sprite%}=OR({32+src_y%(22)+spriteline%},{sprite%})
      ' I
      sprite%=ADD(dest_xy%(20),spriteline%)
      {sprite%}=AND({36+src_y%(20)+spriteline%},{sprite%})
      {sprite%}=OR({28+src_y%(20)+spriteline%},{sprite%})
      ' G
      sprite%=ADD(dest_xy%(18),spriteline%)
      {sprite%}=AND({36+src_y%(18)+spriteline%},{sprite%})
      {sprite%}=OR({24+src_y%(18)+spriteline%},{sprite%})
      ' L
      sprite%=ADD(dest_xy%(16),spriteline%)
      {sprite%}=AND({36+src_y%(16)+spriteline%},{sprite%})
      {sprite%}=OR({20+src_y%(16)+spriteline%},{sprite%})
      ' A
      sprite%=ADD(dest_xy%(14),spriteline%)
      {sprite%}=AND({36+src_y%(14)+spriteline%},{sprite%})
      {sprite%}=OR({32+src_y%(14)+spriteline%},{sprite%})
      ' T
      sprite%=ADD(dest_xy%(12),spriteline%)
      {sprite%}=AND({36+src_y%(12)+spriteline%},{sprite%})
      {sprite%}=OR({8+src_y%(12)+spriteline%},{sprite%})
      ' S
      sprite%=ADD(dest_xy%(10),spriteline%)
      {sprite%}=AND({36+src_y%(10)+spriteline%},{sprite%})
      {sprite%}=OR({4+src_y%(10)+spriteline%},{sprite%})
      ' O
      sprite%=ADD(dest_xy%(8),spriteline%)
      {sprite%}=AND({36+src_y%(8)+spriteline%},{sprite%})
      {sprite%}=OR({16+src_y%(8)+spriteline%},{sprite%})
      ' N
      sprite%=ADD(dest_xy%(6),spriteline%)
      {sprite%}=AND({36+src_y%(6)+spriteline%},{sprite%})
      {sprite%}=OR({12+src_y%(6)+spriteline%},{sprite%})
      ' T
      sprite%=ADD(dest_xy%(4),spriteline%)
      {sprite%}=AND({36+src_y%(4)+spriteline%},{sprite%})
      {sprite%}=OR({8+src_y%(4)+spriteline%},{sprite%})
      ' S
      sprite%=ADD(dest_xy%(2),spriteline%)
      {sprite%}=AND({36+src_y%(2)+spriteline%},{sprite%})
      {sprite%}=OR({4+src_y%(2)+spriteline%},{sprite%})
      ' LOGO
      sprite%=ADD(dest_xy%(0),spriteline%)
      {sprite%}=AND({36+src_y%(0)+spriteline%},{sprite%})
      {sprite%}=OR({0+src_y%(0)+spriteline%},{sprite%})
    NEXT spriteline%
    @swap
  NEXT endstep&
RETURN
'
' ***        BMOVE TRANSITIONS        ***
'
> PROCEDURE rolldowntransition(wipescreen%)
  FOR w%=1 TO 39
    BMOVE logicalscreen%,logicalscreen%+160,80*w%
    BMOVE wipescreen%+80*(w%+w%+1),logicalscreen%+80,80
    BMOVE wipescreen%+80*(w%+w%+2),logicalscreen%,80
  NEXT w%
  FOR w%=0 TO 319
    BMOVE logicalscreen%+(80*w%),logicalscreen%+(80*w%)+160,3200
    BMOVE wipescreen%+80*w%,logicalscreen%+80*w%,80
    BMOVE wipescreen%+80*w%+3280,logicalscreen%+80*w%+80,80
  NEXT w%
  FOR w%=40 DOWNTO 1
    BMOVE logicalscreen%+32000-80*(w%+w%+1),logicalscreen%+32000-80*(w%+w%-1),w%*80
    BMOVE wipescreen%+32000-80*(w%+w%+1),logicalscreen%+32000-80*(w%+w%+1),160
  NEXT w%
RETURN
> PROCEDURE uncovertransition(wipescreen%)
  FOR w%=0 TO 16000 STEP 160
    BMOVE wipescreen%,logicalscreen%+16000-w%,w%
    BMOVE wipescreen%+32000-w%,logicalscreen%+16000,w%
  NEXT w%
RETURN
'
' *** General procedures for ST and STF in monochrome ***
'
> PROCEDURE generalpreps
  '
  ' *** Compiler options ***
  $m128000 ! memory need for the program 2 be compiled - OR RESERVE...
  $I- ! disable interrupt routine  -  $I+{ would enable them
  $N- ! Disable FOR-NEXT range checking
  ' $S> ! Fast select case  -  $C< slower but shorter code
  $*& ! Longword multiplication with muls  -  $*% :  without
  ' $%3 ! Always execute integer division as an integer division  -   $%0 = opposite
  '
  '
  ' *** Disable mouse, and then go to supervisor mode and reserve RAM ***
  '
  OUT 4,18                ! Disable mouse
  sup%=GEMDOS(32,L:0)     ! Go to supervisor mode
  compiled!=BYTE{BASEPAGE+256}<>96  ! false=interpreted/true=compiled
  IF NOT compiled!
    RESERVE 128000 ! if run under interpreter
  ENDIF
  '
  ' *** Create bufferscreen and get screen adresses ***
  '
  predrawbuffer%=MALLOC(32255) ! Create memory buffer for pre-draw screen
  IF predrawbuffer%<=0         ! If unsuccesfull, leave supervisor end exit
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  bufferscreen%=(predrawbuffer%+255) AND &HFFFFFF00 ! Buffer screen address
  logicalscreen%=XBIOS(3)                           ! Logical screen address
  physicalscreen%=XBIOS(2)                          ! Physical screen address
  '
  ' *** Optional: Create graphicsbuffer to grab from with BMOVE or RC_COPY
  '
  graphbuffer%=MALLOC(80000) ! Create memory buffer 400 lines canvas,600 lines sprites
  IF graphbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  '
  ' *** Save keyboard and interrupts ***
  '
  key|=BYTE{&H484}            ! save keyboard
  inter|=BYTE{&HFFFA09}       ! save interrupts
  BYTE{&H484}=AND(key|,&HFE)  ! keyboard sound off
  '  BYTE{&H484}=0            ! keyboard off
  ON ERROR GOSUB generalcleanup ! On error cleanup and quit
  ON BREAK GOSUB generalcleanup ! On break cleanup and quit
RETURN
> PROCEDURE generalcleanup
  freemem%=FRE(0)
  ~MFREE(predrawbuffer%)  ! Free screen buffer (Maybe not needed)
  ~MFREE(graphbuffer%)    ! Free graphbuffer (Maybe not needed)
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1) ! Default screens
  BYTE{&H484}=key|           ! restore keyboard
  BYTE{&HFFFA09}=inter|      ! restore interrupts
  {&H4D2}=0                  ! Stop any music that was playing
  WAVE 0,0                   ! Stop any sound that was playing
  ~GEMDOS(32,L:sup%)         ! Back to user mode
  OUT 4,8                    ! Enable mouse
  IF NOT compiled!
    RESERVE
  ENDIF
  PRINT AT(35,12);"THE END..."
  PRINT AT(37,14);secs
  ~INP(2)
  CLS
  EDIT
RETURN
> PROCEDURE defaultscreen
  ' *** Set output back to default logical screen ***
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1)
RETURN
> PROCEDURE bufferscreen
  ' *** Set screen to buffer screen ***
  ~XBIOS(5,L:bufferscreen%,L:-1,2)
RETURN
> PROCEDURE swap
  SWAP bufferscreen%,logicalscreen%
  ~XBIOS(5,L:bufferscreen%,L:logicalscreen%,-1)
RETURN
