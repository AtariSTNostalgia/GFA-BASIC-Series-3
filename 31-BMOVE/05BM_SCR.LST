'
' *** INITIALIZATION AND PREPARATIONS ***
@generalpreps
@programpreps
@bufferscreen
@predraw             ! Prepares the screens
'
' ***          MAIN PROGRAM           ***
'
@defaultscreen
@uncovertransition(scrollscreen%)
@bmovescroll         ! BMOVE screen from source, shift 2 lines in each step
@scrolltransition(canvasscreen%)
PAUSE 20
@partuncovertransition(scrollscreen%)
@bufferscreen
@partscroll          ! BMOVE part of the source for smaller scroller
@rolldowntransition(scrollscreen%)
PAUSE 30
@venetiantransition(canvasscreen%)
PAUSE 20
'
' ***     END ACTIONS AND CLEANUP     ***
@generalcleanup
'
' ***       PROGRAM PROCEDURES        ***
'
PROCEDURE bmovescroll
  BMOVE scrollscreen%,bufferscreen%,32000
  REPEAT
    FOR scroll&=0 TO 6240 STEP 160
      VSYNC
      BMOVE scrollscreen%+scroll&,bufferscreen%,32000
      @swap
    NEXT scroll&
  UNTIL ASC(INKEY$)=32
RETURN
> PROCEDURE programpreps
  ' *** Preparations specific for this program ***
  '
  wipescreen%=XBIOS(3) ! If I forget to set this, it will take default screen
  '
  ' *** Anything to do before switching screens ***
  '
  CLS
  PRINT AT(33,5);"Please wait..."
  '
RETURN
PROCEDURE predraw
  ' *** Draw any canvas you want to use here ***
  CLS
  DEFFILL 1,2,1
  PBOX 0,0,639,399
  DEFFILL 1,2,4
  PRBOX 40,60,600,340
  DEFFILL 0,2,4
  PRBOX 120,130,520,270
  DEFTEXT 1,0,0,26
  GRAPHMODE 2
  TEXT 130,40," ATARI ST NOSTALGIA "
  GRAPHMODE 1
  canvasscreen%=scrollscreen%+38655
  BMOVE bufferscreen%,canvasscreen%,32000
  CLS
  DEFFILL 1,1
  PCIRCLE 40,40,40
  DEFTEXT 0,0,0,26
  GRAPHMODE 2
  TEXT 10,52,"ST"
  GET 0,0,80,80,circle$
  FOR i|=0 TO 39
    PUT (i| MOD 8)*80,(i| DIV 8)*80,circle$
  NEXT i|
  BMOVE bufferscreen%,scrollscreen%,32000
  BMOVE bufferscreen%,scrollscreen%+32000,6400
RETURN
> PROCEDURE partscroll
  BMOVE logicalscreen%,bufferscreen%,32000
  REPEAT
    FOR scroll%=0 TO 12640 STEP 160
      VSYNC
      BMOVE scrollscreen%+scroll%,bufferscreen%+9600,12800
      @swap
    NEXT scroll%
  UNTIL ASC(INKEY$)=32
RETURN
'
' ***        BMOVE TRANSITIONS        ***
'
> PROCEDURE rolldowntransition(wipescreen%)
  FOR w%=1 TO 39
    BMOVE logicalscreen%,logicalscreen%+160,80*w%
    BMOVE wipescreen%+80*(w%+w%+1),logicalscreen%+80,80
    BMOVE wipescreen%+80*(w%+w%+2),logicalscreen%,80
  NEXT w%
  FOR w%=0 TO 319
    BMOVE logicalscreen%+(80*w%),logicalscreen%+(80*w%)+160,3200
    BMOVE wipescreen%+80*w%,logicalscreen%+80*w%,80
    BMOVE wipescreen%+80*w%+3280,logicalscreen%+80*w%+80,80
  NEXT w%
  FOR w%=40 DOWNTO 1
    BMOVE logicalscreen%+32000-80*(w%+w%+1),logicalscreen%+32000-80*(w%+w%-1),w%*80
    BMOVE wipescreen%+32000-80*(w%+w%+1),logicalscreen%+32000-80*(w%+w%+1),160
  NEXT w%
RETURN
> PROCEDURE scrolltransition(wipescreen%)
  FOR w%=0 TO 31680 STEP 320
    VSYNC
    BMOVE logicalscreen%+320,logicalscreen%,31680
    BMOVE wipescreen%+w%,logicalscreen%+31680,320
  NEXT w%
RETURN
> PROCEDURE uncovertransition(wipescreen%)
  FOR w%=0 TO 16000 STEP 160
    BMOVE wipescreen%,logicalscreen%+16000-w%,w%
    BMOVE wipescreen%+32000-w%,logicalscreen%+16000,w%
  NEXT w%
RETURN
> PROCEDURE partuncovertransition(wipescreen%)
  FOR w%=0 TO 6400 STEP 160
    BMOVE wipescreen%,logicalscreen%+16000-w%,w%
    BMOVE wipescreen%+12800-w%,logicalscreen%+16000,w%
  NEXT w%
RETURN
> PROCEDURE covertransition(wipescreen%)
  FOR w%=16000 TO 0 STEP -160
    BMOVE wipescreen%+w%,logicalscreen%,16000-w%
    BMOVE wipescreen%+16000,logicalscreen%+16000+w%,16000-w%
  NEXT w%
RETURN
> PROCEDURE venetiantransition(wipescreen%)
  FOR w%=0 TO 1920 STEP 80   ! 25 steps of 1 scanline
    FOR w2%=0 TO 30000 STEP 2000  ! Copy 1 scanline and go down 25 lines
      BMOVE wipescreen%+2000-w%-80+w2%,logicalscreen%+w2%,w%+80
    NEXT w2%
  NEXT w%
RETURN
'
' *** General procedures for ST and STF in monochrome ***
'
PROCEDURE generalpreps
  '
  ' *** Compiler options ***
  '   $m256000 ! memory need for the program 2 be compiled - OR RESERVE...
  ' $I- ! disable interrupt routine  -  $I+{ would enable them
  ' $N- ! Disable FOR-NEXT range checking
  ' $S> ! Fast select case  -  $C< slower but shorter code
  ' $*& ! Longword multiplication with muls  -  $*% :  without
  ' $%3 ! Always execute integer division as an integer division  -   $%0 = opposite
  '
  '
  ' *** Disable mouse, and then go to supervisor mode and reserve RAM ***
  '
  OUT 4,18                ! Disable mouse
  sup%=GEMDOS(32,L:0)     ! Go to supervisor mode
  compiled!=BYTE{BASEPAGE+256}<>96  ! false=interpreted/true=compiled
  IF NOT compiled!
    RESERVE 256000 ! if run under interpreter
  ENDIF
  '
  ' *** Create bufferscreen and get screen adresses ***
  '
  predrawbuffer%=MALLOC(32255) ! Create memory buffer for pre-draw screen
  IF predrawbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  bufferscreen%=(predrawbuffer%+255) AND &HFFFFFF00 ! Buffer screen address
  logicalscreen%=XBIOS(3)                           ! Logical screen address
  physicalscreen%=XBIOS(2)                          ! Physical screen address
  '
  ' *** Optional: Create scrollbuffer ***
  '
  graphbuffer%=MALLOC(70655) ! Create memory buffer for graphics
  IF graphbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  scrollscreen%=(graphbuffer%+255) AND &HFFFFFF00 ! Scroll screen address
  '
  ' *** Save keyboard and interrupts ***
  '
  key|=BYTE{&H484}            ! save keyboard
  inter|=BYTE{&HFFFA09}       ! save interrupts
  BYTE{&H484}=AND(key|,&HFE)  ! keyboard sound off
  '  BYTE{&H484}=0            ! keyboard off
  ON ERROR GOSUB generalcleanup ! On error cleanup and quit
  ON BREAK GOSUB generalcleanup ! On break cleanup and quit
RETURN
> PROCEDURE generalcleanup
  ~MFREE(predrawbuffer%)  ! Free bufferscreen (Maybe not needed)
  ~MFREE(graphbuffer%)    ! Free graphbuffer  (Maybe not needed)
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1) ! Default screens
  BYTE{&H484}=key|           ! restore keyboard
  BYTE{&HFFFA09}=inter|      ! restore interrupts
  {&H4D2}=0                  ! Stop any music that was playing
  WAVE 0,0                   ! Stop any sound that was playing
  ~GEMDOS(32,L:sup%)         ! Back to user mode
  OUT 4,8                    ! Enable mouse
  IF NOT compiled!
    RESERVE
  ENDIF
  PRINT AT(35,12);"THE END..."
  ~INP(2)
  EDIT
RETURN
> PROCEDURE defaultscreen
  ' *** Set output back to default logical screen ***
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1)
RETURN
> PROCEDURE bufferscreen
  ' *** Set screen to buffer screen ***
  ~XBIOS(5,L:bufferscreen%,L:-1,-1)
RETURN
> PROCEDURE swap
  SWAP bufferscreen%,logicalscreen%
  ~XBIOS(5,L:bufferscreen%,L:logicalscreen%,-1)
RETURN
