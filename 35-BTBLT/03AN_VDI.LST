'
' *** INITIALIZATION AND PREPARATIONS ***
@generalpreps
@programpreps
@bufferscreen
@predraw
'
' ***          MAIN PROGRAM           ***
@defaultscreen
@rolldowntransition(graphbuffer%)
@bltanim
'
' ***     END ACTIONS AND CLEANUP     ***
@endsequence
@uncovertransition(graphbuffer%)
@generalcleanup
'
' ***       PROGRAM PROCEDURES        ***
'
> PROCEDURE programpreps
  ' *** Preparations specific for this program ***
  '
  ' ** Arrays to store X/Y coordinates **
  DIM xput&(23),yput&(23)
  '
  ' ** Arrays to store parameters for BITBLT **
  DIM blt_src_sprite%(8),blt_src_canvas%(8),blt_dest%(8)
  DIM blt_logo%(8),blt_s%(8),blt_t%(8),blt_n%(8),blt_o%(8),blt_a%(8)
  DIM blt_l%(8),blt_g%(8),blt_i%(8),blt_mask%(8),blt_biglogo%(8)
  '
  ' ** Destination constant values **
  blt_dest%(0)=0
  blt_dest%(1)=640
  blt_dest%(2)=400
  blt_dest%(3)=40
  blt_dest%(4)=0
  blt_dest%(5)=1
  '
  ' ** Set address for spritebuffer **
  spritebuffer%=graphbuffer%+32000
  '
  ' ** Set parameters for BLIT source screens **
  blt_src_sprite%(0)=spritebuffer%
  blt_src_sprite%(1)=640
  blt_src_sprite%(2)=400
  blt_src_sprite%(3)=40
  blt_src_sprite%(4)=0
  blt_src_sprite%(5)=1
  blt_src_canvas%(0)=graphbuffer% ! Not used, bc I use BMOVE for cleanup
  blt_src_canvas%(1)=640
  blt_src_canvas%(2)=400
  blt_src_canvas%(3)=40
  blt_src_canvas%(4)=0
  blt_src_canvas%(5)=1
  '
  '
  ' *** Anything to do before switching screens ***
  CLS
  PRINT AT(33,5);"Please wait..."
  '
RETURN
> PROCEDURE predraw
  '
  ' ** Draw and store background **
  CLS
  DEFFILL 1,2,1
  PBOX 0,0,639,399
  DEFFILL 1,2,4
  PRBOX 40,60,600,340
  DEFFILL 0
  PRBOX 120,130,520,270
  DEFTEXT 1,0,0,26
  GRAPHMODE 2
  TEXT 130,40," ATARI ST NOSTALGIA "
  BMOVE bufferscreen%,graphbuffer%,32000
  '
  ' ** Draw and parameter big logo **
  CLS
  DEFFILL 1,1,0
  PRBOX 400,0,495,31
  DEFTEXT 0,0,0,26
  TEXT 408,28,"ASN"
  blt_biglogo%(0)=400
  blt_biglogo%(1)=0
  blt_biglogo%(2)=495
  blt_biglogo%(3)=31
  blt_biglogo%(5)=356  ! Destination Y coordinates are fixed
  blt_biglogo%(7)=387
  blt_biglogo%(8)=6
  '
  ' ** Draw sprites **
  FOR i|=0 TO 16 STEP 2
    PRBOX (i|*16),0,(i|*16)+16,15
  NEXT i|
  DEFTEXT 0,0,0,6
  GRAPHMODE 2
  TEXT 1,10,""
  PLOT 15,10
  DEFTEXT 0,1,0,6
  TEXT 35,11,"S"
  TEXT 67,11,"T"
  TEXT 99,11,"N"
  TEXT 131,11,"O"
  TEXT 164,11,"L"
  TEXT 195,11,"G"
  TEXT 227,11,"I"
  TEXT 259,11,"A"
  '
  ' ** Store sprite BITBLT parameters source X/Y are fixed **
  blt_logo%(0)=0
  blt_logo%(1)=0
  blt_logo%(2)=15
  blt_logo%(3)=15
  blt_logo%(8)=7
  '
  blt_s%(0)=32
  blt_s%(1)=0
  blt_s%(2)=47
  blt_s%(3)=15
  blt_s%(8)=7
  '
  blt_t%(0)=64
  blt_t%(1)=0
  blt_t%(2)=79
  blt_t%(3)=15
  blt_t%(8)=7
  '
  blt_n%(0)=96
  blt_n%(1)=0
  blt_n%(2)=111
  blt_n%(3)=15
  blt_n%(8)=7
  '
  blt_o%(0)=128
  blt_o%(1)=0
  blt_o%(2)=143
  blt_o%(3)=15
  blt_o%(8)=7
  '
  blt_a%(0)=256
  blt_a%(1)=0
  blt_a%(2)=271
  blt_a%(3)=15
  blt_a%(8)=7
  '
  blt_l%(0)=160
  blt_l%(1)=0
  blt_l%(2)=175
  blt_l%(3)=15
  blt_l%(8)=7
  '
  blt_g%(0)=192
  blt_g%(1)=0
  blt_g%(2)=207
  blt_g%(3)=15
  blt_g%(8)=7
  '
  blt_i%(0)=224
  blt_i%(1)=0
  blt_i%(2)=239
  blt_i%(3)=15
  blt_i%(8)=7
  '
  ' ** Create and parameter mask **
  PBOX 288,0,303,15
  DEFFILL 0
  PRBOX 289,1,302,14
  blt_mask%(0)=288
  blt_mask%(1)=0
  blt_mask%(2)=303
  blt_mask%(3)=15
  blt_mask%(8)=1
  '
  ' ** Move all sprites to spritebuffer and return to default graphmode  **
  GRAPHMODE 1
  BMOVE bufferscreen%,spritebuffer%,2560
RETURN
> PROCEDURE endsequence
  @defaultscreen
  BMOVE graphbuffer%,XBIOS(2),32000
  DEFFILL 1
  FOR box&=0 TO 200
    PBOX 0,200-box&,639,200-(box&+1)
    PBOX 0,200+box&,639,200+(box&+1)
  NEXT box&
  '  DEFFILL 0
  ' FOR box&=0 TO 200
  ' PBOX 0,200-box&,639,200-(box&+1)
  ' PBOX 0,200+box&,639,200+(box&+1)
  ' NEXT box&
RETURN
> PROCEDURE bltanim
  BMOVE graphbuffer%,bufferscreen%,32000
  BMOVE graphbuffer%,logicalscreen%,32000
  ARRAYFILL xput&(),512
  ARRAYFILL yput&(),192
  DO UNTIL ASC(INKEY$)=32
    time%=TIMER
    FOR angle&=0 TO 359 STEP 1
      VSYNC
      '
      ' ** Re-set destination after @swap **
      blt_dest%(0)=bufferscreen%
      '
      ' *** BMOVE of 32 scanlines is faster ***
      BMOVE graphbuffer%+28480,bufferscreen%+28480,2560
      '
      ' *** Cleanup old  sprites. Fixed pattern means only 1 to cleanup ***
      cleanup%=MUL(yput&(23),80)
      BMOVE graphbuffer%+cleanup%,bufferscreen%+cleanup%,1280
      '
      ' *** Write new coordinates ***
      INSERT xput&(0)=312+200*COSQ(4*angle&)
      INSERT yput&(0)=192-110*SINQ(3*angle&)
      '
      ' *** draw masks ***
      FOR mask&=0 TO 22 STEP 2
        blt_mask%(4)=xput&(mask&)
        blt_mask%(5)=yput&(mask&)
        blt_mask%(6)=ADD(xput&(mask&),15)
        blt_mask%(7)=ADD(yput&(mask&),15)
        BITBLT blt_src_sprite%(),blt_dest%(),blt_mask%()
      NEXT mask&
      '
      ' ***   Draw sprites in reverse order: aiglatsonts<logo>    ***
      ' ***  Each sprite needs the 4 new destination coordinates  ***
      blt_a%(4)=xput&(22)
      blt_a%(5)=yput&(22)
      blt_a%(6)=ADD(xput&(22),15)
      blt_a%(7)=ADD(yput&(22),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_a%()
      '
      blt_i%(4)=xput&(20)
      blt_i%(5)=yput&(20)
      blt_i%(6)=ADD(xput&(20),15)
      blt_i%(7)=ADD(yput&(20),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_i%()
      '
      blt_g%(4)=xput&(18)
      blt_g%(5)=yput&(18)
      blt_g%(6)=ADD(xput&(18),15)
      blt_g%(7)=ADD(yput&(18),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_g%()
      '
      blt_l%(4)=xput&(16)
      blt_l%(5)=yput&(16)
      blt_l%(6)=ADD(xput&(16),15)
      blt_l%(7)=ADD(yput&(16),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_l%()
      '
      blt_a%(4)=xput&(14)
      blt_a%(5)=yput&(14)
      blt_a%(6)=ADD(xput&(14),15)
      blt_a%(7)=ADD(yput&(14),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_a%()
      '
      blt_t%(4)=xput&(12)
      blt_t%(5)=yput&(12)
      blt_t%(6)=ADD(xput&(12),15)
      blt_t%(7)=ADD(yput&(12),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_t%()
      '
      blt_s%(4)=xput&(10)
      blt_s%(5)=yput&(10)
      blt_s%(6)=ADD(xput&(10),15)
      blt_s%(7)=ADD(yput&(10),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_s%()
      '
      blt_o%(4)=xput&(8)
      blt_o%(5)=yput&(8)
      blt_o%(6)=ADD(xput&(8),15)
      blt_o%(7)=ADD(yput&(8),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_o%()
      '
      blt_n%(4)=xput&(6)
      blt_n%(5)=yput&(6)
      blt_n%(6)=ADD(xput&(6),15)
      blt_n%(7)=ADD(yput&(6),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_n%()
      '
      blt_t%(4)=xput&(4)
      blt_t%(5)=yput&(4)
      blt_t%(6)=ADD(xput&(4),15)
      blt_t%(7)=ADD(yput&(4),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_t%()
      '
      blt_s%(4)=xput&(2)
      blt_s%(5)=yput&(2)
      blt_s%(6)=ADD(xput&(2),15)
      blt_s%(7)=ADD(yput&(2),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_s%()
      '
      blt_logo%(4)=xput&(0)
      blt_logo%(5)=yput&(0)
      blt_logo%(6)=ADD(xput&(0),15)
      blt_logo%(7)=ADD(yput&(0),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_logo%()
      '
      blt_biglogo%(4)=272-200*COSQ(MUL(angle&,2))
      blt_biglogo%(6)=ADD(blt_biglogo%(4),95)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_biglogo%()
      @swap
    NEXT angle&
    secs=SUB(TIMER,time%)/200
  LOOP
  '
  ' *** Using separate arrays for every sprite means I write  ***
  ' *** 4 coordinates per sprite inside the loop instead of 8 ***
  ' *** Without extra arrays it would have been a total of:   ***
  ' *** 2 + 12*8 (masks) + 2 + 13*8 (sprites) = 204 var  R/W! ***
  ' *** In this routine the number is reduced to a total of:  ***
  ' *** 1 + 12*4 (masks) + 12*4 + 2 (sprite2) = 99  var R/W   ***
  '
  BMOVE graphbuffer%+28480,bufferscreen%+28480,2560
  BMOVE graphbuffer%+28480,logicalscreen%+28480,2560
  FOR endstep&=0 TO 22
    VSYNC
    '
    ' ** Re-set destination after @swap **
    blt_dest%(0)=bufferscreen%
    '
    ' *** Cleanup old  sprites ***
    cleanup%=MUL(yput&(23),80)
    BMOVE graphbuffer%+cleanup%,bufferscreen%+cleanup%,1280
    '
    INSERT xput&(0)=512
    INSERT yput&(0)=192
    '
    ' *** draw masks ***
    FOR mask&=0 TO 22 STEP 2
      blt_mask%(4)=xput&(mask&)
      blt_mask%(5)=yput&(mask&)
      blt_mask%(6)=ADD(xput&(mask&),15)
      blt_mask%(7)=ADD(yput&(mask&),15)
      BITBLT blt_src_sprite%(),blt_dest%(),blt_mask%()
    NEXT mask&
    '
    ' *** Draw sprites ***
    blt_a%(4)=xput&(22)
    blt_a%(5)=yput&(22)
    blt_a%(6)=ADD(xput&(22),15)
    blt_a%(7)=ADD(yput&(22),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_a%()
    '
    blt_i%(4)=xput&(20)
    blt_i%(5)=yput&(20)
    blt_i%(6)=ADD(xput&(20),15)
    blt_i%(7)=ADD(yput&(20),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_i%()
    '
    blt_g%(4)=xput&(18)
    blt_g%(5)=yput&(18)
    blt_g%(6)=ADD(xput&(18),15)
    blt_g%(7)=ADD(yput&(18),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_g%()
    '
    blt_l%(4)=xput&(16)
    blt_l%(5)=yput&(16)
    blt_l%(6)=ADD(xput&(16),15)
    blt_l%(7)=ADD(yput&(16),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_l%()
    '
    blt_a%(4)=xput&(14)
    blt_a%(5)=yput&(14)
    blt_a%(6)=ADD(xput&(14),15)
    blt_a%(7)=ADD(yput&(14),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_a%()
    '
    blt_t%(4)=xput&(12)
    blt_t%(5)=yput&(12)
    blt_t%(6)=ADD(xput&(12),15)
    blt_t%(7)=ADD(yput&(12),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_t%()
    '
    blt_s%(4)=xput&(10)
    blt_s%(5)=yput&(10)
    blt_s%(6)=ADD(xput&(10),15)
    blt_s%(7)=ADD(yput&(10),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_s%()
    '
    blt_o%(4)=xput&(8)
    blt_o%(5)=yput&(8)
    blt_o%(6)=ADD(xput&(8),15)
    blt_o%(7)=ADD(yput&(8),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_o%()
    '
    blt_n%(4)=xput&(6)
    blt_n%(5)=yput&(6)
    blt_n%(6)=ADD(xput&(6),15)
    blt_n%(7)=ADD(yput&(6),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_n%()
    '
    blt_t%(4)=xput&(4)
    blt_t%(5)=yput&(4)
    blt_t%(6)=ADD(xput&(4),15)
    blt_t%(7)=ADD(yput&(4),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_t%()
    '
    blt_s%(4)=xput&(2)
    blt_s%(5)=yput&(2)
    blt_s%(6)=ADD(xput&(2),15)
    blt_s%(7)=ADD(yput&(2),15)
    BITBLT blt_src_sprite%(),blt_dest%(),blt_s%()
    '
    @swap
  NEXT endstep&
RETURN
'
' ***        BMOVE TRANSITIONS        ***
'
> PROCEDURE rolldowntransition(wipescreen%)
  FOR w%=1 TO 39
    BMOVE logicalscreen%,logicalscreen%+160,80*w%
    BMOVE wipescreen%+80*(w%+w%+1),logicalscreen%+80,80
    BMOVE wipescreen%+80*(w%+w%+2),logicalscreen%,80
  NEXT w%
  FOR w%=0 TO 319
    BMOVE logicalscreen%+(80*w%),logicalscreen%+(80*w%)+160,3200
    BMOVE wipescreen%+80*w%,logicalscreen%+80*w%,80
    BMOVE wipescreen%+80*w%+3280,logicalscreen%+80*w%+80,80
  NEXT w%
  FOR w%=40 DOWNTO 1
    BMOVE logicalscreen%+32000-80*(w%+w%+1),logicalscreen%+32000-80*(w%+w%-1),w%*80
    BMOVE wipescreen%+32000-80*(w%+w%+1),logicalscreen%+32000-80*(w%+w%+1),160
  NEXT w%
RETURN
> PROCEDURE uncovertransition(wipescreen%)
  FOR w%=0 TO 16000 STEP 160
    BMOVE wipescreen%,logicalscreen%+16000-w%,w%
    BMOVE wipescreen%+32000-w%,logicalscreen%+16000,w%
  NEXT w%
RETURN
'
' *** General procedures for ST and STF in monochrome ***
'
> PROCEDURE generalpreps
  '
  ' *** Compiler options ***
  '   $m256000 ! memory need for the program 2 be compiled - OR RESERVE...
  ' $I- ! disable interrupt routine  -  $I+{ would enable them
  ' $N- ! Disable FOR-NEXT range checking
  ' $S> ! Fast select case  -  $C< slower but shorter code
  ' $*& ! Longword multiplication with muls  -  $*% :  without
  ' $%3 ! Always execute integer division as an integer division  -   $%0 = opposite
  '
  '
  ' *** Disable mouse, and then go to supervisor mode and reserve RAM ***
  '
  OUT 4,18                ! Disable mouse
  sup%=GEMDOS(32,L:0)     ! Go to supervisor mode
  compiled!=BYTE{BASEPAGE+256}<>96  ! false=interpreted/true=compiled
  IF NOT compiled!
    RESERVE 256000 ! if run under interpreter
  ENDIF
  '
  ' *** Create bufferscreen and get screen adresses ***
  '
  predrawbuffer%=MALLOC(32255) ! Create memory buffer for pre-draw screen
  IF predrawbuffer%<=0         ! If unsuccesfull, leave supervisor end exit
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  bufferscreen%=(predrawbuffer%+255) AND &HFFFFFF00 ! Buffer screen address
  logicalscreen%=XBIOS(3)                           ! Logical screen address
  physicalscreen%=XBIOS(2)                          ! Physical screen address
  '
  ' *** Optional: Create graphicsbuffer to grab from with BMOVE or RC_COPY
  '
  graphbuffer%=MALLOC(65000) ! Create memory buffer
  IF graphbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  '
  ' *** Save keyboard and interrupts ***
  '
  key|=BYTE{&H484}            ! save keyboard
  inter|=BYTE{&HFFFA09}       ! save interrupts
  BYTE{&H484}=AND(key|,&HFE)  ! keyboard sound off
  '  BYTE{&H484}=0            ! keyboard off
  ON ERROR GOSUB generalcleanup ! On error cleanup and quit
  ON BREAK GOSUB generalcleanup ! On break cleanup and quit
RETURN
> PROCEDURE generalcleanup
  freemem%=FRE(0)
  ~MFREE(predrawbuffer%)  ! Free screen buffer (Maybe not needed)
  ~MFREE(graphbuffer%)    ! Free graphbuffer (Maybe not needed)
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1) ! Default screens
  BYTE{&H484}=key|           ! restore keyboard
  BYTE{&HFFFA09}=inter|      ! restore interrupts
  {&H4D2}=0                  ! Stop any music that was playing
  WAVE 0,0                   ! Stop any sound that was playing
  ~GEMDOS(32,L:sup%)         ! Back to user mode
  OUT 4,8                    ! Enable mouse
  IF NOT compiled!
    RESERVE
  ENDIF
  PRINT AT(35,12);"THE END..."
  PRINT AT(37,14);secs
  ~INP(2)
  CLS
  EDIT
RETURN
> PROCEDURE defaultscreen
  ' *** Set output back to default logical screen ***
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1)
  logicalscreen%=physicalscreen%
RETURN
> PROCEDURE bufferscreen
  ' *** Set screen to buffer screen ***
  ~XBIOS(5,L:bufferscreen%,L:-1,-1)
RETURN
> PROCEDURE swap
  SWAP bufferscreen%,logicalscreen%
  ~XBIOS(5,L:bufferscreen%,L:logicalscreen%,-1)
RETURN
