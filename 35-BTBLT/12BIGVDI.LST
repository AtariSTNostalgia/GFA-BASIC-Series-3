'
' *** INITIALIZATION AND PREPARATIONS ***
@generalpreps
@programpreps
@bufferscreen
@predraw
'
' ***          MAIN PROGRAM           ***
'
@bigblt
' ***     END ACTIONS AND CLEANUP     ***
@endsequence
@generalcleanup
'
' ***       PROGRAM PROCEDURES        ***
'
> PROCEDURE programpreps
  ' *** Preparations specific for this program ***
  spritebuffer%=graphbuffer%+32000
  '
  ' ** Anything to do on screen before switching screens **
  CLS
  PRINT AT(33,5);"Please wait..."
  '
  ' ** Prepare arrays for BITBLT **
  DIM blitsource%(8),blitdest%(8),mask%(8),logo%(8),x%(2),y%(2)
  '
  blitsource%(0)=spritebuffer%
  blitsource%(1)=640
  blitsource%(2)=400
  blitsource%(3)=40
  blitsource%(4)=0
  blitsource%(5)=1
  '
  blitdest%(1)=640
  blitdest%(2)=400
  blitdest%(3)=40
  blitdest%(4)=0
  blitdest%(5)=1
  '
  logo%(0)=0
  logo%(1)=0
  logo%(2)=191
  logo%(3)=63
  logo%(4)=0
  logo%(5)=0
  logo%(6)=191
  logo%(7)=63
  logo%(8)=7
  '
  mask%(0)=192
  mask%(1)=0
  mask%(2)=383
  mask%(3)=63
  mask%(4)=192
  mask%(5)=0
  mask%(6)=383
  mask%(7)=63
  mask%(8)=1
RETURN
> PROCEDURE bigblt
  ARRAYFILL x%(),426
  ARRAYFILL y%(),168
  REPEAT
    time%=TIMER
    FOR angle&=0 TO 359
      VSYNC
      blitdest%(0)=bufferscreen%
      '
      ' ** Cleanup 64 scanlines with BMOVE ***
      cleanup%=MUL(y%(1),80)
      BMOVE graphbuffer%+cleanup%,bufferscreen%+cleanup%,5120
      '
      ' ** Insert new coordinates **
      INSERT x%(0)=226+200*COSQ(angle&)
      INSERT y%(0)=168-160*SINQ(2*angle&)
      '
      ' ** Put the mask and sprite **
      mask%(4)=x%(0)
      mask%(5)=y%(0)
      mask%(6)=ADD(x%(0),191)
      mask%(7)=ADD(y%(0),63)
      logo%(4)=x%(0)
      logo%(5)=y%(0)
      logo%(6)=ADD(x%(0),191)
      logo%(7)=ADD(y%(0),63)
      BITBLT blitsource%(),blitdest%(),mask%()
      BITBLT blitsource%(),blitdest%(),logo%()
      @swap
    NEXT angle&
    secs=SUB(TIMER,time%)/200
  UNTIL ASC(INKEY$)=27
RETURN
> PROCEDURE predraw
  CLS
  DEFFILL 1,1,0
  PRBOX 0,0,191,63
  GRAPHMODE 2
  DEFTEXT 0,0,0,26
  TEXT 8,28," ATARI "
  DEFTEXT 0,0,0,13
  TEXT 6,48,"ST NOSTALGIA RULEZ MAN!"
  GRAPHMODE 1
  PBOX 192,0,383,63
  DEFFILL 0,0
  PRBOX 193,1,382,62
  BMOVE bufferscreen%,spritebuffer%,32000
  CLS
  DEFFILL 1,2,19
  PBOX 0,0,639,399
  DEFFILL 1,0
  PBOX -1,183,640,216
  DEFTEXT 1,0,0,26
  GRAPHMODE 2
  TEXT 120,212," ATARI ST NOSTALGIA "
  BMOVE bufferscreen%,logicalscreen%,32000
  BMOVE bufferscreen%,graphbuffer%,32000
  GRAPHMODE 1
RETURN
> PROCEDURE endsequence
  @defaultscreen
  '
  DEFFILL 1
  FOR box&=0 TO 200
    PBOX 0,200-box&,639,200-(box&+1)
    PBOX 0,200+box&,639,200+(box&+1)
  NEXT box&
  DEFFILL 0
  FOR box&=0 TO 200
    PBOX 0,200-box&,639,200-(box&+1)
    PBOX 0,200+box&,639,200+(box&+1)
  NEXT box&
RETURN
'
' *** General procedures for ST and STF in monochrome ***
'
> PROCEDURE generalpreps
  '
  ' *** Compiler options ***
  '   $m256000 ! memory need for the program 2 be compiled - OR RESERVE...
  ' $I- ! disable interrupt routine  -  $I+{ would enable them
  ' $N- ! Disable FOR-NEXT range checking
  ' $S> ! Fast select case  -  $C< slower but shorter code
  ' $*& ! Longword multiplication with muls  -  $*% :  without
  ' $%3 ! Always execute integer division as an integer division  -   $%0 = opposite
  '
  '
  ' *** Disable mouse, and then go to supervisor mode and reserve RAM ***
  '
  OUT 4,18                ! Disable mouse
  sup%=GEMDOS(32,L:0)     ! Go to supervisor mode
  compiled!=BYTE{BASEPAGE+256}<>96  ! false=interpreted/true=compiled
  IF NOT compiled!
    RESERVE 256000 ! if run under interpreter
  ENDIF
  '
  ' *** Create bufferscreen and get screen adresses ***
  '
  predrawbuffer%=MALLOC(32255) ! Create memory buffer for pre-draw screen
  IF predrawbuffer%<=0         ! If unsuccesfull, leave supervisor end exit
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  bufferscreen%=(predrawbuffer%+255) AND &HFFFFFF00 ! Buffer screen address
  logicalscreen%=XBIOS(3)                           ! Logical screen address
  physicalscreen%=XBIOS(2)                          ! Physical screen address
  '
  ' *** Optional: Create graphicsbuffer to grab from with BMOVE or RC_COPY
  '
  graphbuffer%=MALLOC(65535) ! Allocate memory to store graphics and stuff
  IF graphbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  '  screen1%=(graphbuffer%+255) AND &HFFFFFF00 ! Graphbuffer screen address
  '
  ' *** Save keyboard and interrupts ***
  '
  key|=BYTE{&H484}            ! save keyboard
  inter|=BYTE{&HFFFA09}       ! save interrupts
  BYTE{&H484}=AND(key|,&HFE)  ! keyboard sound off
  '  BYTE{&H484}=0            ! keyboard off
  ON ERROR GOSUB generalcleanup ! On error cleanup and quit
  ON BREAK GOSUB generalcleanup ! On break cleanup and quit
RETURN
> PROCEDURE generalcleanup
  ~MFREE(predrawbuffer%)     ! Free screen buffer (Maybe not needed)
  ~MFREE(graphbuffer%)       ! Free graphbuffer (Maybe not needed)
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,2) ! Default screens
  BYTE{&H484}=key|           ! restore keyboard
  BYTE{&HFFFA09}=inter|      ! restore interrupts
  {&H4D2}=0                  ! Stop any music that was playing
  WAVE 0,0                   ! Stop any sound that was playing
  ~GEMDOS(32,L:sup%)         ! Back to user mode
  OUT 4,8                    ! Enable mouse
  IF NOT compiled!
    RESERVE
  ENDIF
  PRINT AT(35,10);"THE END..."
  PRINT AT(37,12);secs
  ~INP(2)
  EDIT
RETURN
> PROCEDURE defaultscreen
  ' *** Set output back to default single screen buffer ***
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1)
RETURN
> PROCEDURE bufferscreen
  ' *** Set screen to buffer screen ***
  ~XBIOS(5,L:bufferscreen%,L:-1,-1)
RETURN
> PROCEDURE swap
  SWAP bufferscreen%,logicalscreen%
  ~XBIOS(5,L:bufferscreen%,L:logicalscreen%,-1)
RETURN
