'
' *** INITIALIZATION AND PREPARATIONS ***
@generalpreps
@programpreps
@wipepreps
@bufferscreen
@predraw
'
' ***          MAIN PROGRAM           ***
'
@defaultscreen
@bltput
@curtaintransition(screen2%)
PAUSE 75
@slatstransition(screen1%)
PAUSE 75
@iristransition(screen2%)
PAUSE 75
@randomtransition(screen1%)
PAUSE 75
@crosstransition(screen2%)
PAUSE 75
@assembletransition(screen1%)
PAUSE 75
@squaretransition(screen2%)
PAUSE 75
@iristransition(screen1%)
PAUSE 50
'
' ***     END ACTIONS AND CLEANUP     ***
@generalcleanup
'
' ***       PROGRAM PROCEDURES        ***
'
> PROCEDURE bltput
  wipesource%(0)=screen2%
  blitwipe%(0)=0
  blitwipe%(1)=0
  blitwipe%(2)=639
  blitwipe%(3)=399
  blitwipe%(4)=blitwipe%(0)
  blitwipe%(5)=blitwipe%(1)
  blitwipe%(6)=blitwipe%(2)
  blitwipe%(7)=blitwipe%(3)
  '
  BITBLT wipesource%(),wipedest%(),blitwipe%()
  PAUSE 50
  wipesource%(0)=screen1%
  BITBLT wipesource%(),wipedest%(),blitwipe%()
  PAUSE 50
RETURN
> PROCEDURE programpreps
  ' *** Preparations specific for this program ***
  '
  wipescreen%=XBIOS(3) ! If I forget to set this, it will take default screen
  '
  ' *** Anything to do before switching screens ***
  '
  CLS
  PRINT AT(33,5);"Please wait..."
  '
RETURN
> PROCEDURE predraw
  ' *** Draw any canvas you want to use here ***
  CLS
  DEFFILL 1,2,1
  PBOX 0,0,639,399
  DEFFILL 1,2,4
  PRBOX 40,60,600,340
  DEFFILL 0,2,4
  PRBOX 120,130,520,270
  DEFTEXT 1,0,0,26
  GRAPHMODE 2
  TEXT 130,40," ATARI ST NOSTALGIA "
  GRAPHMODE 1
  screen1%=screen2%+32000
  BMOVE bufferscreen%,screen1%,32000
  CLS
  DEFFILL 1,1
  PCIRCLE 40,40,40
  DEFTEXT 0,0,0,26
  GRAPHMODE 2
  TEXT 10,52,"ST"
  GET 0,0,80,80,circle$
  FOR i|=0 TO 39
    PUT (i| MOD 8)*80,(i| DIV 8)*80,circle$
  NEXT i|
  BMOVE bufferscreen%,screen2%,32000
  '  BMOVE bufferscreen%,screen2%+32000,6400
RETURN
'
' ***        BITBLT TRANSITIONS        ***
'
> PROCEDURE wipepreps
  '  ** Arrays independent of other BITBLT arrays **
  DIM wipesource%(8),wipedest%(8),blitwipe%(8)
  wipesource%(1)=640
  wipesource%(2)=400
  wipesource%(3)=40
  wipesource%(4)=0
  wipesource%(5)=1
  '
  ' ** Always transition to current screen **
  wipedest%(0)=0
  '
  ' ** Default Mode = 3 (Always replace) **
  blitwipe%(8)=3
RETURN
> PROCEDURE slatstransition(wipescreen%)
  wipesource%(0)=wipescreen%
  FOR w%=0 TO 39 STEP 2
    FOR w2%=0 TO 15
      blitwipe%(0)=w%+w2%*40
      blitwipe%(1)=0
      blitwipe%(2)=ADD(blitwipe%(0),1)
      blitwipe%(3)=399
      '
      blitwipe%(4)=blitwipe%(0)
      blitwipe%(5)=0
      blitwipe%(6)=blitwipe%(2)
      blitwipe%(7)=399
      BITBLT wipesource%(),wipedest%(),blitwipe%()
    NEXT w2%
  NEXT w%
RETURN
> PROCEDURE curtaintransition(wipescreen%)
  wipesource%(0)=wipescreen%
  FOR w%=0 TO 319 STEP 4
    blitwipe%(0)=w%
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(1)=0
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(2)=blitwipe%(0)+3
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(3)=399
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
    '
    blitwipe%(0)=636-w%
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(1)=0
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(2)=blitwipe%(0)+3
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(3)=399
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
  NEXT w%
RETURN
'
' ** The ones below here are from original code by Carlos Tirado **
'
> PROCEDURE iristransition(wipescreen%)
  wipesource%(0)=wipescreen%
  FOR w%=1 TO 49 ! <= Change this number when you change the "100"
    ' ** X/Y start in the middle - 1/100 of the screen dimentions times w% **
    blitwipe%(0)=wipesource%(1)/2-w%*wipesource%(1)/100
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(1)=wipesource%(2)/2-w%*wipesource%(2)/100
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(2)=wipesource%(1)/2+w%*wipesource%(1)/100-1
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(3)=wipesource%(2)/2+w%*wipesource%(2)/100-1
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
  NEXT w%
  BMOVE wipescreen%,XBIOS(2),32000
RETURN
> PROCEDURE randomtransition(wipescreen%)
  wipesource%(0)=wipescreen%
  LOCAL a$
  a$=SPACE$(400)
  FOR w%=0 TO 399
    DPOKE VARPTR(a$)+w%*2,w%
  NEXT w%
  FOR w%=399 DOWNTO 0
    rand%=RANDOM(w%)
    w2%=DPEEK(VARPTR(a$)+rand%*2)
    blitwipe%(0)=(w2% MOD 20)*INT(wipesource%(1)/20)
    blitwipe%(1)=INT(w2%/20)*INT(wipesource%(2)/20)
    blitwipe%(2)=blitwipe%(0)+INT(wipesource%(1)/20)
    blitwipe%(3)=blitwipe%(1)+INT(wipesource%(2)/20)
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(7)=blitwipe%(3)
    DPOKE VARPTR(a$)+rand%*2,DPEEK(VARPTR(a$)+w%*2)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
  NEXT w%
  CLR a$
RETURN
> PROCEDURE crosstransition(wipescreen%)
  wipesource%(0)=wipescreen%
  FOR w%=1 TO 40
    blitwipe%(0)=0
    blitwipe%(1)=0
    blitwipe%(2)=w%*wipesource%(1)/80-1
    blitwipe%(3)=w%*wipesource%(2)/80
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
    '
    blitwipe%(1)=wipesource%(2)-blitwipe%(3)
    blitwipe%(3)=wipesource%(2)-1
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
    '
    blitwipe%(0)=wipesource%(1)-blitwipe%(2)-1
    blitwipe%(2)=wipesource%(1)-1
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
    '
    blitwipe%(1)=0
    blitwipe%(3)=w%*wipesource%(2)/80
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
  NEXT w%
RETURN
> PROCEDURE assembletransition(wipescreen%)
  wipesource%(0)=wipescreen%
  FOR w%=0 TO 39
    FOR w2%=0 TO 7
      blitwipe%(1)=w2%*wipesource%(2)/8
      blitwipe%(3)=blitwipe%(1)+wipesource%(2)/8
      IF EVEN(w2%)
        blitwipe%(0)=w%*wipesource%(1)/40    ! 10 pixels at a time. Even = L->R
      ELSE
        blitwipe%(0)=wipesource%(1)-w%*wipesource%(1)/40-wipesource%(1)/40
      ENDIF
      blitwipe%(2)=blitwipe%(0)+wipesource%(1)/40-1
      blitwipe%(4)=blitwipe%(0)
      blitwipe%(5)=blitwipe%(1)
      blitwipe%(6)=blitwipe%(2)
      blitwipe%(7)=blitwipe%(3)
      BITBLT wipesource%(),wipedest%(),blitwipe%()
    NEXT w2%
  NEXT w%
RETURN
> PROCEDURE squaretransition(wipescreen%)
  wipesource%(0)=wipescreen%
  FOR w%=0 TO 99
    w2%=w%*2-ODD(INT(w%*2/10))+99*(w%>49)+2*(ODD(INT(w%*2/10)) AND w%>49)
    blitwipe%(0)=(w2% MOD 10)*INT(wipesource%(1)/10)
    blitwipe%(1)=INT(w2%/10)*INT(wipesource%(2)/10)
    blitwipe%(2)=blitwipe%(0)+INT(wipesource%(1)/10)
    blitwipe%(3)=blitwipe%(1)+INT(wipesource%(2)/10)
    blitwipe%(4)=blitwipe%(0)
    blitwipe%(5)=blitwipe%(1)
    blitwipe%(6)=blitwipe%(2)
    blitwipe%(7)=blitwipe%(3)
    BITBLT wipesource%(),wipedest%(),blitwipe%()
  NEXT w%
RETURN
'
' *** General procedures for ST and STF in monochrome ***
'
> PROCEDURE generalpreps
  '
  ' *** Compiler options ***
  '   $m256000 ! memory need for the program 2 be compiled - OR RESERVE...
  ' $I- ! disable interrupt routine  -  $I+{ would enable them
  ' $N- ! Disable FOR-NEXT range checking
  ' $S> ! Fast select case  -  $C< slower but shorter code
  ' $*& ! Longword multiplication with muls  -  $*% :  without
  ' $%3 ! Always execute integer division as an integer division  -   $%0 = opposite
  '
  '
  ' *** Disable mouse, and then go to supervisor mode and reserve RAM ***
  '
  OUT 4,18                ! Disable mouse
  sup%=GEMDOS(32,L:0)     ! Go to supervisor mode
  compiled!=BYTE{BASEPAGE+256}<>96  ! false=interpreted/true=compiled
  IF NOT compiled!
    RESERVE 128000 ! if run under interpreter
  ENDIF
  '
  ' *** Create bufferscreen and get screen adresses ***
  '
  predrawbuffer%=MALLOC(32255) ! Create memory buffer for pre-draw screen
  IF predrawbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  bufferscreen%=(predrawbuffer%+255) AND &HFFFFFF00 ! Buffer screen address
  logicalscreen%=XBIOS(3)                           ! Logical screen address
  physicalscreen%=XBIOS(2)                          ! Physical screen address
  '
  ' *** Optional: Create scrollbuffer ***
  '
  graphbuffer%=MALLOC(70655) ! Create memory buffer for graphics
  IF graphbuffer%<=0
    ~GEMDOS(32,L:sup%)
    IF NOT compiled!
      RESERVE
    ENDIF
    EDIT
  ENDIF
  screen2%=(graphbuffer%+255) AND &HFFFFFF00 ! Address to store screens
  '
  ' *** Save keyboard and interrupts ***
  '
  key|=BYTE{&H484}            ! save keyboard
  inter|=BYTE{&HFFFA09}       ! save interrupts
  BYTE{&H484}=AND(key|,&HFE)  ! keyboard sound off
  '  BYTE{&H484}=0            ! keyboard off
  ON ERROR GOSUB generalcleanup ! On error cleanup and quit
  ON BREAK GOSUB generalcleanup ! On break cleanup and quit
RETURN
> PROCEDURE generalcleanup
  ~MFREE(predrawbuffer%)  ! Free bufferscreen (Maybe not needed)
  ~MFREE(graphbuffer%)    ! Free graphbuffer  (Maybe not needed)
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1) ! Default screens
  BYTE{&H484}=key|           ! restore keyboard
  BYTE{&HFFFA09}=inter|      ! restore interrupts
  {&H4D2}=0                  ! Stop any music that was playing
  WAVE 0,0                   ! Stop any sound that was playing
  ~GEMDOS(32,L:sup%)         ! Back to user mode
  OUT 4,8                    ! Enable mouse
  IF NOT compiled!
    RESERVE
  ENDIF
  PRINT AT(35,12);"THE END..."
  ~INP(2)
  EDIT
RETURN
> PROCEDURE defaultscreen
  ' *** Set output back to default logical screen ***
  ~XBIOS(5,L:physicalscreen%,L:physicalscreen%,-1)
RETURN
> PROCEDURE bufferscreen
  ' *** Set screen to buffer screen ***
  ~XBIOS(5,L:bufferscreen%,L:-1,-1)
RETURN
